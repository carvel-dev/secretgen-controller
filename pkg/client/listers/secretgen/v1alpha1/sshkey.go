// Copyright 2021 VMware, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/carvel-secretgen-controller/pkg/apis/secretgen/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SSHKeyLister helps list SSHKeys.
type SSHKeyLister interface {
	// List lists all SSHKeys in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SSHKey, err error)
	// SSHKeys returns an object that can list and get SSHKeys.
	SSHKeys(namespace string) SSHKeyNamespaceLister
	SSHKeyListerExpansion
}

// sSHKeyLister implements the SSHKeyLister interface.
type sSHKeyLister struct {
	indexer cache.Indexer
}

// NewSSHKeyLister returns a new SSHKeyLister.
func NewSSHKeyLister(indexer cache.Indexer) SSHKeyLister {
	return &sSHKeyLister{indexer: indexer}
}

// List lists all SSHKeys in the indexer.
func (s *sSHKeyLister) List(selector labels.Selector) (ret []*v1alpha1.SSHKey, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SSHKey))
	})
	return ret, err
}

// SSHKeys returns an object that can list and get SSHKeys.
func (s *sSHKeyLister) SSHKeys(namespace string) SSHKeyNamespaceLister {
	return sSHKeyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SSHKeyNamespaceLister helps list and get SSHKeys.
type SSHKeyNamespaceLister interface {
	// List lists all SSHKeys in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SSHKey, err error)
	// Get retrieves the SSHKey from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SSHKey, error)
	SSHKeyNamespaceListerExpansion
}

// sSHKeyNamespaceLister implements the SSHKeyNamespaceLister
// interface.
type sSHKeyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SSHKeys in the indexer for a given namespace.
func (s sSHKeyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SSHKey, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SSHKey))
	})
	return ret, err
}

// Get retrieves the SSHKey from the indexer for a given namespace and name.
func (s sSHKeyNamespaceLister) Get(name string) (*v1alpha1.SSHKey, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sshkey"), name)
	}
	return obj.(*v1alpha1.SSHKey), nil
}
